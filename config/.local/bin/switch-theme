#!/usr/bin/python


import os
import subprocess
import sys
from pathlib import Path


CONFIG_DIR = f'{os.getenv("HOME")}/.config/switch-theme'
THEMES_DIRECTORY = f'{os.getenv("HOME")}/dotfiles/themes'
THEMES_TTY_DIRECTORY = f'{os.getenv("HOME")}/dotfiles/themes-tty'


def theme_switching():
    if os.path.exists(f'{CONFIG_DIR}/current_theme'):
        with open(f'{CONFIG_DIR}/current_theme', 'r') as f:
            current_theme = f.read().strip()
    else:
        current_theme = None
        print('Current theme has not been set yet, switching might fail')
        print()

    available_themes = [ f.name for f in os.scandir(THEMES_DIRECTORY) if f.is_dir() ]

    if current_theme is not None and current_theme not in available_themes:
        print('Current theme does not exist in themes directory, switching might fail')
        print()

    available_themes = [ theme for theme in available_themes if theme != current_theme ]

    print(f'Current theme: {current_theme}')
    print('Available themes:')
    for theme in available_themes:
        print(f'- {theme}')
    
    while True:
        print()
        choice = input('Pick theme to switch to, or CTRL-C to cancel: ')

        if choice in available_themes:
            if current_theme is not None:
                subprocess.run(['stow', '--no-folding', '-d', THEMES_DIRECTORY, '-t', os.getenv('HOME'), '-D', current_theme])
            
            subprocess.run(['stow', '--no-folding', '-d', THEMES_DIRECTORY, '-t', os.getenv('HOME'), choice])

            subprocess.run(['betterlockscreen', '-u', f'{os.getenv("HOME")}/pictures/wp/wallpaper.png'])

            # if X11
            subprocess.run(['nitrogen', '--restore'])
            subprocess.run(['i3-msg', 'restart'])

            with open(f'{CONFIG_DIR}/current_theme', 'w') as f:
                f.write(choice)

            print('Theme switched, relog to have it fully applied')

            break

        else:
            print(f'"{choice}" is not on the list')
            


def tty_theme_switching():
    if os.path.exists(f'{CONFIG_DIR}/current_tty_theme'):
        with open(f'{CONFIG_DIR}/current_tty_theme', 'r') as f:
            current_tty_theme = f.read().strip()
    else:
        current_tty_theme = None
        print('Current tty theme has not been set yet, switching might fail')

    available_tty_themes = [ f.name for f in os.scandir(THEMES_TTY_DIRECTORY) if f.is_dir() ]

    if current_tty_theme is not None and current_tty_theme not in available_tty_themes:
        print('Current theme does not exist in themes directory, switching might fail')
        print()

    available_tty_themes = [ theme for theme in available_tty_themes if theme != current_tty_theme ]

    print(f'Current theme: {current_tty_theme}')
    print('Available themes:')
    for theme in available_tty_themes:
        print(f'- {theme}')
    
    while True:
        print()
        choice = input('Pick theme to switch to, or CTRL-C to cancel: ')

        if choice in available_tty_themes:
            if current_tty_theme is not None:
                subprocess.run(['stow', '--no-folding', '-d', THEMES_TTY_DIRECTORY, '-t', os.getenv('HOME'), '-D', current_tty_theme])
            
            subprocess.run(['stow', '--no-folding', '-d', THEMES_TTY_DIRECTORY, '-t', os.getenv('HOME'), choice])

            with open(f'{CONFIG_DIR}/current_tty_theme', 'w') as f:
                f.write(choice)

            print('Theme switched, relog to have it applied')

            break

        else:
            print(f'"{choice}" is not on the list')


if __name__=='__main__':
    Path(CONFIG_DIR).mkdir(parents=True, exist_ok=True)

    if len(sys.argv) != 2 or sys.argv[1] not in [ '--system', '--tty' ]:
        print('Run "switch-theme --system" to switch system theme')
        print('Run "switch-theme --tty" to switch tty theme')
        print('Run "switch-theme --help" to show this message')
    
    elif sys.argv[1] == '--system':
        theme_switching()
    
    else:
        tty_theme_switching()
